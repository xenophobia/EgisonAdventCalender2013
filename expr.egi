#| matchers |#
(define $op
  (algebraic-data-matcher
   {<eq> <lt> <le> <gt> <ge> <plus> <mult>}))

(define $expr
  (algebraic-data-matcher
    {<boolE bool>
     <intE integer>
     <varE string>
     <opE op expr expr>
     <letE string expr expr>
     <lamE string expr>
     <ifE expr expr expr>
     <appE expr expr>
     <fail>}))

(define $childexpr
  (pattern-function [$p]
    (| <opE _ p _> <opE _ _ p>
       <letE _ p _> <letE _ _ p>
       <lamE _ p>
       <ifE p _ _> <ifE _ p _> <ifE _ _ p>
       <appE p _> <appE _ p>)))

(define $subexpr
  (pattern-function [$p] (| (childexpr (subexpr p)) p)))

(define $leafs (pattern-function [] (| <boolE _> <intE _> <varE _>)))
(define $leafexpr
  (pattern-function [$p] (subexpr (& p (leafs)))))

#| eval |#

(define $value (pattern-function [] (| <boolE _> <intE _> <lamE _ _> <fail>)))

(define $op-eval
  (match-lambda expr
    {[<opE <eq> <boolE $v1> <boolE $v2>> <BoolE (eq? v1 v2)>]
     [<opE <eq> <intE $v1> <intE $v2>> <BoolE (eq? v1 v2)>]
     [<opE <lt> <intE $i1> <intE $i2>> <BoolE (lt? i1 i2)>]
     [<opE <le> <intE $i1> <intE $i2>> <BoolE (lte? i1 i2)>]
     [<opE <gt> <intE $i1> <intE $i2>> <BoolE (gt? i1 i2)>]
     [<opE <ge> <intE $i1> <intE $i2>> <BoolE (gte? i1 i2)>]
     [<opE <plus> <intE $i1> <intE $i2>> <IntE (+ i1 i2)>]
     [<opE <mult> <intE $i1> <intE $i2>> <IntE (* i1 i2)>]
     [_ <Fail>]}))

(define $subst
  (lambda [$x $v]
    (letrec {[$go
              (match-lambda expr
                {[<varE ,x> v]
                 [<opE $op $e1 $e2> <OpE op (go e1) (go e2)>]
                 [<letE ,x $e1 $e2> <LetE x e1 e2>]
                 [<letE $y $e1 $e2> <LetE y (go e1) (go e2)>]
                 [<lamE ,x $e> <LamE x e>]
                 [<lamE $y $e> <LamE y (go e)>]
                 [<ifE $e1 $e2 $e3> <IfE (go e1) (go e2) (go e3)>]
                 [<appE $e1 $e2> <AppE (go e1) (go e2)>]
                 [$v v]})]} go)))

(define $step-cbv
  (match-lambda expr
    {[(& <opE _ (value) (value)> $op-redex) (op-eval op-redex)]
     [<opE $op (& ^(value) $e1) $e2> <OpE op (step-cbv e1) e2>]
     [<opE $op $e1 (& ^(value) $e2)> <OpE op e1 (step-cbv e2)>]
     [<letE $x (& (value) $v) $e>
      (let {[$vr ((subst x <LetE x v <VarE x>>) v)]}
        ((subst x vr) e))]
     [<letE $x $e1 $e2> <LetE x (step-cbv e1) e2>]
     [<ifE <boolE ,#t> $e _> e]
     [<ifE <boolE ,#f> _ $e> e]
     [<ifE (& ^(value) $e1) $e2 $e3> <IfE (step-cbv e1) e2 e3>]
     [<appE <lamE $x $e> (& (value) $v)> ((subst x v) e)]
     [<appE (& <lamE _ _> $e1) $e2> <AppE e1 (step-cbv e2)>]
     [<appE (& ^(value) $e1) $e2> <AppE (step-cbv e1) e2>]
     [_ <Fail>]}))

(define $eval-cbv
  (match-lambda expr
    {[(& (value) $v) v]
     [$e (eval-cbv (step-cbv e))]}))

#| instances |#

(define $factE
  <LetE "fact"
        <LamE "x"
              <IfE <OpE <Gt> <VarE "x"> <IntE 0>>
                   <LetE "y"
                         <OpE <Plus> <VarE "x"> <IntE -1>>
                         <OpE <Mult> <VarE "x"> <AppE <VarE "fact"> <VarE "y">>>>
                   <IntE 1>>
              >
        <AppE <VarE "fact"> <IntE 5>>>)

(define $testE
  <IfE <OpE <Eq> <IntE 1> <IntE 2>>
       <BoolE #f>
       <BoolE #t>>)