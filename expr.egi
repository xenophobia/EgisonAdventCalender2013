(define $op
  (algebraic-data-matcher
   {<eq> <lt> <le> <gt> <ge> <plus> <mult>}))

(define $expr
  (algebraic-data-matcher
    {<boolE bool>
     <intE integer>
     <varE string>
     <opE op expr expr>
     <letE string (list string) expr expr>
     <ifE expr expr expr>
     <appE string (list expr)>}))

(define $contains
  (pattern-function [$p] <join _ <cons p _>>))

(define $childexpr
  (pattern-function [$p]
                    (| <opE _ p _> <opE _ _ p>
                       <letE _ _ p _> <letE _ _ _ p>
                       <ifE p _ _> <ifE _ p _> <ifE _ _ p>
                       <appE _ (contains p)>)))

(define $subexpr
  (pattern-function [$p] (| (childexpr (subexpr p)) p)))

(define $leafs (pattern-function [] (| <boolE _> <intE _> <varE _>)))
(define $leafexpr
  (pattern-function [$p] (subexpr (& p (leafs)))))

(define $factE
  <LetE "fact" {"x"}
        <IfE <OpE <Ge> <VarE "x"> <IntE 0>>
             <LetE "x" {}
                   <OpE <Plus> <VarE "x"> <IntE -1>>
                   <AppE "fact" {<VarE "x">}>>
             <IntE 1>>
        <AppE "fact" {<VarE "n">}>>)
